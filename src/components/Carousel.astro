---
import { ChevronLeft, ChevronRight } from "@lucide/astro";
import { Image } from "astro:assets";
const imageModules = import.meta.glob("../assets/años-anteriores/*.jpg", {
  eager: true,
});

// Create a mapping from year to description
const descriptions: Record<string, string> = {
  "2024": "2024, Concepción",
  "2023": "2023, Valparaíso",
  "2019": "2019, Valdivia",
  "2018": "2018, Santiago",
  "2017": "2017, Concepción",
  "2016": "2016, La Serena",
  "2015": "2015, Valparaíso",
};

const positions: Record<string, string> = {
  "2024": "object-[0%_80%]",
  "2023": "object-[0%_40%]",
  "2019": "object-[0%_50%]",
  "2018": "object-[0%_80%]",
  "2017": "object-bottom",
  "2016": "object-[0%_80%]",
  "2015": "0%_0%",
};

const images = Object.entries(imageModules)
  .map(([path, mod]) => {
    const filename = path.split("/").pop() as string; // e.g., "2015-valparaiso.jpg"
    const [year] = filename.split("-"); // get "2015"

    return {
      year,
      src: mod.default,
      description: descriptions[year] || "",
      position: positions[year],
    };
  })
  .sort((a, b) => Number(b.year) - Number(a.year));
---

<div class="embla not-prose relative w-full h-[350px] overflow-hidden">
  <div class="embla__viewport h-full">
    <div class="embla__container flex h-full">
      {
        images.map((image) => (
          <div class="embla__slide min-w-0 relative flex-none w-full h-full">
            <Image
              src={image.src}
              alt={image.description}
              class:list={["w-full h-full object-cover", image.position]}
            />
            <div class="absolute bottom-0 left-0 w-full h-24 bg-gradient-to-t from-black to-transparent" />
            <span class="absolute bottom-0 left-0 w-full p-4 text-white text-lg font-semibold z-1">
              {image.description}
            </span>
          </div>
        ))
      }
    </div>
  </div>
  <div
    class="embla__controls pointer-events-none w-full absolute bottom-0 left-1/2 bottom-1/2 transform -translate-x-1/2 translate-y-1/2 flex justify-between"
  >
    <button
      class="embla__prev pointer-events-auto m-4 h-12 w-12 bg-white/50 rounded-full cursor-pointer flex justify-center items-center"
      ><ChevronLeft class="h-2/3 w-2/3" /></button
    >
    <button
      class="embla__next pointer-events-auto m-4 h-12 w-12 bg-white/50 rounded-full cursor-pointer flex justify-center items-center"
      ><ChevronRight class="h-2/3 w-2/3" /></button
    >
  </div>
  <div class="embla__dots"></div>
</div>

<style is:inline>
  .embla__dots {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-end;
    align-items: center;
    margin-right: calc((2.6rem - 1.4rem) / 2 * -1);
  }
  .embla__dot {
    -webkit-tap-highlight-color: rgba(var(--text-high-contrast-rgb-value), 0.5);
    -webkit-appearance: none;
    appearance: none;
    background-color: transparent;
    touch-action: manipulation;
    display: inline-flex;
    text-decoration: none;
    cursor: pointer;
    border: 0;
    padding: 0;
    margin: 0;
    width: 2.6rem;
    height: 2.6rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
  }
  .embla__dot:after {
    box-shadow: inset 0 0 0 0.2rem var(--detail-medium-contrast);
    width: 1.4rem;
    height: 1.4rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    content: "";
  }
  .embla__dot--selected:after {
    box-shadow: inset 0 0 0 0.2rem var(--text-body);
  }
</style>

<script>
  import EmblaCarousel from "embla-carousel";
  import Autoplay from "embla-carousel-autoplay";

  // Grab wrapper nodes
  const rootNode = document.querySelector(".embla")!;
  const viewportNode = rootNode.querySelector(
    ".embla__viewport",
  ) as HTMLElement;

  // Grab button nodes
  const prevButtonNode = rootNode.querySelector(".embla__prev") as HTMLElement;
  const nextButtonNode = rootNode.querySelector(".embla__next") as HTMLElement;

  // Grab dots node
  const dotsNode = document.querySelector(".embla__dots") as HTMLElement;

  // Initialize the carousel
  const embla = EmblaCarousel(viewportNode, { loop: true }, [
    Autoplay({ playOnInit: true, delay: 3000 }),
  ]);

  let dotNodes: HTMLButtonElement[] = [];

  const addDotBtnsWithClickHandlers = () => {
    dotsNode.innerHTML = embla
      .scrollSnapList()
      .map(() => '<button class="embla__dot" type="button"></button>')
      .join("");

    const scrollTo = (index: number) => {
      embla.scrollTo(index);
    };

    dotNodes = Array.from(dotsNode.querySelectorAll(".embla__dot"));
    dotNodes.forEach((dotNode, index) => {
      dotNode.addEventListener("click", () => scrollTo(index), false);
    });
  };

  const toggleDotBtnsActive = () => {
    const previous = embla.previousScrollSnap();
    const selected = embla.selectedScrollSnap();
    dotNodes[previous].classList.remove("embla__dot--selected");
    dotNodes[selected].classList.add("embla__dot--selected");
  };

  embla.on("init", addDotBtnsWithClickHandlers).on("init", toggleDotBtnsActive);

  // Add click listeners
  prevButtonNode.addEventListener("click", () => embla.scrollPrev());
  nextButtonNode.addEventListener("click", () => embla.scrollNext());
</script>
